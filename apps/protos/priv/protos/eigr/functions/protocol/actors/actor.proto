syntax = "proto3";

package eigr.functions.protocol.actors;

import "google/protobuf/any.proto";

option java_package = "io.eigr.functions.protocol.actors";
option go_package = "github.com/eigr/go-support/eigr/actors;actors";

message Registry {
    map<string, Actor> actors = 1;
}

message ActorSystem {
    string name = 1;
    Registry registry = 2;
}

// A strategy for save state.
message ActorSnapshotStrategy {
    oneof strategy {
        // Timeout strategy.
        // Call the statestore when the timeout is triggered. This is default strategy.
        TimeoutStrategy timeout = 1;

        // Action strategy
        // Call the statestore after the actor function has been invoked.
        ActionStrategy action = 2;
    }
}

// A strategy which a user function's entity is passivated.
message ActorDeactivateStrategy {
    oneof strategy {
        // Timeout strategy.
        TimeoutStrategy timeout = 2;
    }
}

// A strategy based on a timeout. 
message TimeoutStrategy {
    // The timeout in millis
    int64 timeout = 1;
}

// A strategy based on Functions calls.
message ActionStrategy {}

message ActorState {
    map<string, string> tags = 1;
    google.protobuf.Any state = 2;
}

// A Actor instance identification
message ActorId {
    // The name of a Actor Entity.
    string name = 1;
    
    // A user function defines an actor that has a ´name´ as part of its unique key in persistent storage, 
    // this identification mechanism is sometimes not sufficient to identify an actor 
    // when the invocation mechanism requires that multiple instances of an actor can be created. 
    // An entity id is used to compose the uri that identifies the Actor in persistent storage.
    // Default is ´"actor://system/:system_name/actors/:name/parent´
    string resource = 2;

    // Name of a ActorSystem
    string actor_system = 3;
}

// Actor abstraction.
message Actor {
    // The id of Actor.
    ActorId actor_id = 1;

    // Indicates whether an actor's state should be persisted in a definitive store.
    bool persistent = 2;
    
    // A Actor state.
    ActorState state = 3;

    // Snapshot strategy
    ActorSnapshotStrategy snapshot_strategy = 4;

    // Deactivate strategy
    ActorDeactivateStrategy deactivate_strategy = 5;
}