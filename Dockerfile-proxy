# Build Stage
FROM elixir:1.15-alpine AS builder

ENV MIX_ENV=prod

WORKDIR /app

# Install build dependencies in a single layer
RUN apk add --no-cache git build-base ca-certificates zstd gcc pkgconfig openssl-dev

# Copy project files
COPY config/ ./config
COPY spawn_proxy/ ./spawn_proxy
COPY lib/ ./lib
COPY spawn_statestores/ ./spawn_statestores
COPY priv/ ./priv
COPY mix.exs mix.lock ./

# Fetch dependencies, build release, and clean up build dependencies
RUN mix local.rebar --force \
    && mix local.hex --force \
    && mix deps.get \
    && mix release.init \
    && cd spawn_proxy/proxy \
    && mix deps.get \
    && mix release proxy \
    && apk del build-base gcc pkgconfig openssl-dev

# Application Stage
FROM alpine:3.20

# Set runner environment
ENV MIX_ENV=prod
ENV HOME=/app

# Create a user with ID 1000
RUN adduser -D -u 1000 appuser

RUN apk add --no-cache --update zstd ncurses-libs libstdc++ libgcc protobuf

WORKDIR /app

# Copy the built release and configuration
COPY rel/overlays/mtls.ssl.conf .
COPY --from=builder --chown=1000:1000 /app/_build/${MIX_ENV}/rel/proxy ./

# Create necessary directories and files with appropriate permissions
RUN mkdir -p /app/.cache/bakeware/ /data/ /app/priv/generated_modules/ && \
    chown -R appuser /app/.cache/bakeware/ /data/ /app/priv/generated_modules/ && \
    chmod 600 /app/priv/generated_modules/ && \
    chmod 600 /data/ && \
    touch /.erlang.cookie /app/.erlang.cookie && \
    chown appuser /app/.erlang.cookie && \
    chmod 600 /.erlang.cookie /app/.erlang.cookie

USER appuser

ENTRYPOINT ["/app/bin/proxy", "start"]
