defmodule <%= mod_name %>.ProxyService do
  @moduledoc """
  This <%= mod_name %>.ProxyService module only passes 
  incoming gRPC requests to the respective Entity handlers.

  """
  @moduledoc since: "0.1.0"

  use GRPC.Server, service: <%= name %>

  alias ActivatorGrpc.Api.Dispatcher

<%= Enum.map methods, fn(method) -> %>
  @spec <%= method %>(<%= Map.get(input_types, method) %>.t(), GRPC.Server.Stream.t()) :: <%= Map.get(output_types, method) %>.t()
  def <%= method %>(message, stream), 
    do: 
      Dispatcher.dispatch(%{
        service_name: "<%= service_name %>",
        original_method: "<%= Map.get(original_methods, method) %>",
        message: message, 
        stream: stream,
        input_type: <%= Map.get(input_types, method) %>,
        output_type: <%= Map.get(output_types, method) %>,
        request_type: "<%= Map.get(request_types, method) %>"
      })
<% end %>

end